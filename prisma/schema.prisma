generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  llm           LLM[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model OAuthCredentials {
  id              String  @id @default(cuid())
  user_id         String
  organization_id String?
  provider        String
  state           String
  redirect_uri    String

  token_type              String?
  access_token_enc        String?
  access_token_expiration DateTime?
  refresh_token_enc       String?
  scope                   String?

  create_date DateTime  @default(now())
  update_date DateTime? @updatedAt
  delete_date DateTime?

  @@index([state])
  @@index([user_id])
  @@map("oauth_credentials")
}

model LLM {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  model       String?   @default("gpt-3.5-turbo")
  temperature Float?    @default(0.7)
  apiKey      String
  userId      String
  docs        String[]
  maxLoops    Int?      @default(2)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  create_date DateTime  @default(now())
  update_date DateTime? @updatedAt
  delete_date DateTime?

  @@map("llm")
}
